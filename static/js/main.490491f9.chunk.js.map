{"version":3,"sources":["redux/reducers/posts.js","redux/reducers/comments.js","redux/rootReducer.js","redux/store.js","components/commentsList.js","redux/actions/commentsActions.js","components/commentField.js","components/post.js","redux/actions/postActions.js","components/postsList.js","components/AppBarFeed.js","components/Mainlayout.js","App.js","serviceWorker.js","index.js"],"names":["initialState","loading","posts","error","comments","rootReducer","combineReducers","state","action","type","payload","store","createStore","composeWithDevTools","applyMiddleware","thunk","useStyles","makeStyles","theme","root","backgroundColor","palette","background","paper","margin","borderRadius","nested","paddingLeft","spacing","header","Comments","props","classes","map","e","key","id","ListItem","alignItems","ListItemAvatar","style","fontSize","color","ListItemText","primary","name","secondary","Fragment","Typography","component","variant","className","inline","email","overflowWrap","body","Divider","light","fetchCommentRequest","fetchCommentSuccess","fetchCommentFailure","connect","dispatch","add_Comment","comment","addComment","useState","setComment","add","a","postId","Math","random","toString","substr","TextField","label","placeholder","fullWidth","onChange","text","target","value","onKeyDown","enterKey","InputLabelProps","shrink","ListItemSecondaryAction","onClick","IconButton","edge","aria-label","marginTop","marginBottom","title","myComments","_","filter","o","React","open","setOpen","List","aria-labelledby","subheader","ListSubheader","gutterBottom","ListItemIcon","button","Collapse","in","timeout","unmountOnExit","disableStrictModeCompat","disablePadding","fetchPostsRequest","fetchPostsSuccess","fetchPostsFailure","fetch_Posts","axios","get","then","response","data","catch","message","fetch_Comments","useEffect","CircularProgress","appBar","top","bottom","AppBarFeed","AppBar","position","Toolbar","grow","Layout","Grid","container","paddingTop","item","xs","sm","md","lg","xl","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.490491f9.chunk.js","sourcesContent":["const initialState = {\r\n  loading: false,\r\n  posts: [],\r\n  error: \"\",\r\n};\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"FETCH_POST_REQUEST\":\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case \"FETCH_POST_SUCCESS\":\r\n      return {\r\n        loading: false,\r\n        posts: action.payload,\r\n        error: \"\",\r\n      };\r\n    case \"FETCH_POSTS_FAILURE\":\r\n      return {\r\n        loading: false,\r\n        posts: [],\r\n        error: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","const initialState = {\r\n  loading: false,\r\n  comments: [],\r\n  error: \"\",\r\n};\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"FETCH_COMMENT_REQUEST\":\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case \"FETCH_COMMENT_SUCCESS\":\r\n      return {\r\n        loading: false,\r\n        comments: action.payload,\r\n        error: \"\",\r\n      };\r\n    case \"FETCH_COMMENT_FAILURE\":\r\n      return {\r\n        loading: false,\r\n        comments: [],\r\n        error: action.payload,\r\n      };\r\n    case \"ADD_COMMENT\":\r\n      return { ...state, comments: [...state.comments, action.payload] };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport posts from \"./reducers/posts\";\r\nimport comments from \"./reducers/comments\";\r\n\r\n//combine reducers\r\nconst rootReducer = combineReducers({\r\n  posts: posts,\r\n  comments: comments,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport rootReducer from \"./rootReducer\";\r\n\r\n//store redux creation\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n//material ui\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    margin: 10,\r\n    borderRadius: 20,\r\n  },\r\n  nested: {\r\n    paddingLeft: theme.spacing(4),\r\n  },\r\n  header: { borderRadius: 20 },\r\n}));\r\n\r\nexport default function Comments(props) {\r\n  const classes = useStyles();\r\n\r\n  const { comments } = props;\r\n\r\n  return (\r\n    <>\r\n      {comments.map((e) => {\r\n        return (\r\n          <div key={e.id}>\r\n            <ListItem alignItems=\"flex-start\">\r\n              <ListItemAvatar>\r\n                <InsertEmoticonIcon\r\n                  style={{ fontSize: 40, color: \"#37475A\" }}\r\n                />\r\n              </ListItemAvatar>\r\n              <ListItemText\r\n                primary={e.name}\r\n                secondary={\r\n                  <React.Fragment>\r\n                    <Typography\r\n                      component=\"span\"\r\n                      variant=\"body2\"\r\n                      className={classes.inline}\r\n                      color=\"textPrimary\"\r\n                    >\r\n                      {`${e.email} - `}\r\n                    </Typography>\r\n\r\n                    <Typography\r\n                      component=\"span\"\r\n                      variant=\"body2\"\r\n                      className={classes.inline}\r\n                      color=\"textPrimary\"\r\n                      style={{ overflowWrap: \"break-word\" }}\r\n                    >\r\n                      {`${e.body}`}\r\n                    </Typography>\r\n                  </React.Fragment>\r\n                }\r\n              />\r\n            </ListItem>\r\n            <Divider light />\r\n          </div>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nComments.propTypes = {\r\n  comments: PropTypes.array.isRequired,\r\n};\r\n","import axios from \"axios\";\r\n\r\nexport const fetchComments = () => {\r\n  return (dispatch) => {\r\n    dispatch(fetchCommentRequest());\r\n    axios\r\n      .get(\"https://jsonplaceholder.typicode.com/comments\")\r\n      .then((response) => {\r\n        //getting comments\r\n        const comment = response.data;\r\n\r\n        dispatch(fetchCommentSuccess(comment));\r\n      })\r\n      .catch((error) => {\r\n        // error cannot fetch comments\r\n        dispatch(fetchCommentFailure(error.message));\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchCommentRequest = () => {\r\n  return {\r\n    type: \"FETCH_COMMENT_REQUEST\",\r\n  };\r\n};\r\n\r\nexport const fetchCommentSuccess = (comments) => {\r\n  return {\r\n    type: \"FETCH_COMMENT_SUCCESS\",\r\n    payload: comments,\r\n  };\r\n};\r\n\r\nexport const fetchCommentFailure = (error) => {\r\n  return {\r\n    type: \"FETCH_COMMENT_FAILURE\",\r\n    payload: error,\r\n  };\r\n};\r\n\r\nexport const addComment = (comment) => {\r\n  return {\r\n    type: \"ADD_COMMENT\",\r\n    payload: comment,\r\n  };\r\n};\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n//redux\r\nimport { connect } from \"react-redux\";\r\n\r\n//material ui\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\n\r\n//actions\r\nimport { addComment } from \"../redux/actions/commentsActions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    margin: 10,\r\n    borderRadius: 20,\r\n  },\r\n  nested: {\r\n    paddingLeft: theme.spacing(4),\r\n  },\r\n  header: { borderRadius: 20 },\r\n}));\r\n\r\nfunction CommentField(props) {\r\n  const { add_Comment, id } = props;\r\n  const [comment, setComment] = useState(\"\");\r\n\r\n  const classes = useStyles();\r\n\r\n  const createRandom = () => {\r\n    return Math.random().toString(36).substr(2, 5);\r\n  };\r\n\r\n  const enterKey = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      add();\r\n    }\r\n  };\r\n\r\n  const add = () => {\r\n    var a = {\r\n      postId: id,\r\n      id: createRandom(),\r\n      name: \"You\",\r\n      email: \"you@test.com\",\r\n      body: comment,\r\n    };\r\n\r\n    setComment(\"\");\r\n    add_Comment(a);\r\n  };\r\n  return (\r\n    <ListItem className={classes.nested}>\r\n      <TextField\r\n        id=\"standard-full-width\"\r\n        label=\"Share your opinion\"\r\n        style={{ margin: 0 }}\r\n        placeholder=\"Write your comment here\"\r\n        fullWidth\r\n        onChange={(text) => {\r\n          setComment(text.target.value);\r\n        }}\r\n        onKeyDown={(e) => {\r\n          enterKey(e);\r\n        }}\r\n        value={comment}\r\n        margin=\"normal\"\r\n        InputLabelProps={{\r\n          shrink: true,\r\n        }}\r\n      />\r\n      <ListItemSecondaryAction onClick={add}>\r\n        <IconButton edge=\"end\" aria-label=\"delete\">\r\n          <SendIcon color=\"action\" />\r\n        </IconButton>\r\n      </ListItemSecondaryAction>\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    add_Comment: (comment) => dispatch(addComment(comment)),\r\n  };\r\n};\r\n\r\nCommentField.propTypes = {\r\n  add_Comment: PropTypes.func.isRequired,\r\n  id: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentField);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n//redux\r\nimport { connect } from \"react-redux\";\r\n\r\n//material ui\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\r\nimport ChatBubbleOutlineRoundedIcon from \"@material-ui/icons/ChatBubbleOutlineRounded\";\r\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\n\r\n//components\r\nimport Comments from \"./commentsList\";\r\nimport CommentField from \"./commentField\";\r\n\r\n//lodash\r\nimport _ from \"lodash\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    marginTop: 10,\r\n    marginBottom: 10,\r\n    borderRadius: 6,\r\n  },\r\n  nested: {\r\n    paddingLeft: theme.spacing(4),\r\n  },\r\n  header: { borderRadius: 20 },\r\n}));\r\n\r\nfunction Post(props) {\r\n  const { title, body, id, comments } = props;\r\n\r\n  const myComments = _.filter(comments, function (o) {\r\n    return o.postId === id;\r\n  });\r\n\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  return (\r\n    <List\r\n      component=\"nav\"\r\n      aria-labelledby=\"nested-list-subheader\"\r\n      subheader={\r\n        <ListSubheader\r\n          className={classes.header}\r\n          component=\"div\"\r\n          id=\"nested-list-subheader\"\r\n        >\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Post\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\" gutterBottom>\r\n            {title}\r\n          </Typography>\r\n        </ListSubheader>\r\n      }\r\n      className={classes.root}\r\n    >\r\n      <ListItem>\r\n        <ListItemIcon>\r\n          <InsertEmoticonIcon style={{ fontSize: 40, color: \"#37475A\" }} />\r\n        </ListItemIcon>\r\n        <ListItemText primary={body} />\r\n      </ListItem>\r\n\r\n      <ListItem button onClick={handleClick}>\r\n        <ListItemIcon>\r\n          <ChatBubbleOutlineRoundedIcon color=\"action\" />\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Comments\" />\r\n        {open ? <ExpandLess color=\"action\" /> : <ExpandMore color=\"action\" />}\r\n      </ListItem>\r\n      <Collapse\r\n        in={open}\r\n        timeout=\"auto\"\r\n        unmountOnExit\r\n        disableStrictModeCompat={true}\r\n      >\r\n        <List component=\"div\" disablePadding>\r\n          <Comments comments={myComments}> </Comments>\r\n          <CommentField id={id}></CommentField>\r\n        </List>\r\n      </Collapse>\r\n    </List>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    comments: state.comments ? state.comments.comments : [],\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nPost.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  body: PropTypes.string.isRequired,\r\n  id: PropTypes.number.isRequired,\r\n  comments: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Post);\r\n","import axios from \"axios\";\r\n\r\nexport const fetchPosts = () => {\r\n  return (dispatch) => {\r\n    dispatch(fetchPostsRequest());\r\n    axios\r\n      .get(\"https://jsonplaceholder.typicode.com/posts\")\r\n      .then((response) => {\r\n        // getting posts\r\n        const posts = response.data;\r\n        dispatch(fetchPostsSuccess(posts));\r\n      })\r\n      .catch((error) => {\r\n        //cannot get posts\r\n        dispatch(fetchPostsFailure(error.message));\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchPostsRequest = () => {\r\n  return {\r\n    type: \"FETCH_POST_REQUEST\",\r\n  };\r\n};\r\n\r\nexport const fetchPostsSuccess = (posts) => {\r\n  return {\r\n    type: \"FETCH_POST_SUCCESS\",\r\n    payload: posts,\r\n  };\r\n};\r\n\r\nexport const fetchPostsFailure = (error) => {\r\n  return {\r\n    type: \"FETCH_POSTS_FAILURE\",\r\n    payload: error,\r\n  };\r\n};\r\n","//redux\r\nimport React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n//material ui\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\n//component\r\nimport Post from \"../components/post\";\r\n\r\n//actions\r\nimport { fetchPosts } from \"../redux/actions/postActions\";\r\nimport { fetchComments } from \"../redux/actions/commentsActions\";\r\n\r\nfunction PostsList(props) {\r\n  const { posts, fetch_Posts, fetch_Comments } = props;\r\n\r\n  useEffect(() => {\r\n    fetch_Posts();\r\n    fetch_Comments();\r\n  }, [fetch_Posts, fetch_Comments]);\r\n\r\n  return (\r\n    <div>\r\n      {posts.loading ? (\r\n        <CircularProgress />\r\n      ) : posts.error ? (\r\n        \"Error loading posts, please try again.\"\r\n      ) : (\r\n        posts.posts.map((e) => {\r\n          return (\r\n            <Post key={e.id} title={e.title} body={e.body} id={e.id}></Post>\r\n          );\r\n        })\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.posts,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetch_Posts: () => dispatch(fetchPosts()),\r\n    fetch_Comments: (id) => dispatch(fetchComments(id)),\r\n  };\r\n};\r\n\r\nPostsList.propTypes = {\r\n  fetch_Posts: PropTypes.func.isRequired,\r\n  fetch_Comments: PropTypes.func.isRequired,\r\n  posts: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostsList);\r\n","import React from \"react\";\r\n\r\n//material ui\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n//styles\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    top: 0,\r\n    bottom: \"auto\",\r\n    color: \"#FFFFFF\",\r\n    backgroundColor: \"#2980b9\",\r\n    alignItems: \"center\",\r\n  },\r\n}));\r\n\r\nexport default function AppBarFeed() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <AppBar position=\"fixed\" className={classes.appBar}>\r\n      <Toolbar>\r\n        <Typography variant=\"h6\" className={classes.title}>\r\n          Feed\r\n        </Typography>\r\n        <div className={classes.grow} />\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n","import React from \"react\";\r\n//material ui\r\nimport Grid from \"@material-ui/core/Grid\";\r\n//component\r\nimport PostsList from \"./postsList\";\r\nimport Appbar from \"./AppBarFeed\";\r\n\r\nexport default function Layout() {\r\n  return (\r\n    <>\r\n      <Appbar></Appbar>\r\n      <Grid container style={{ paddingTop: 100 }}>\r\n        <Grid item xs></Grid>\r\n        <Grid item xs={12} sm={12} md={6} lg={6} xl={6}>\r\n          <PostsList></PostsList>\r\n        </Grid>\r\n        <Grid item xs></Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport \"./App.css\";\nimport Layout from \"./components/Mainlayout\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Layout></Layout>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}